* What is JDBC or JDBC related API?
* What is JDBC driver?

In the initial days when the concept of drivers were not
there , coders used to write the code in accordance to
the database for which they requre to work to with.

Which means if I am connecting with DB2 , I will write
or I will use DB2 specific classes for database connectivity. Which means my code is tightly coupled
to the database.

Which means if we are planning to change from DB2 to
MySQL they entire code needs to be changed. That was
making the concept tightly coupled code.

Later on the concept of driver came which was being
given by Microsoft in the form of ODBC ( Open Database
Connectivity ) 

Previously before the driver concept came in
 
Code specific to DB2=====================> DB2
Code specific to MYSQL===================> MYSQL

After the driver concept came into

Code =======>   Driver    ====================> database
            ( Implementation )
Code =======> DB2 Driver ======================> DB2
          ( Implemented code for the driver
            is written for DB2)
Code ======> MySQL Driver ======================> MySQL
          ( Implemented code for the driver
            iw written for MYSQL)
In Java
Code =====> JDBC API ===========> Driver=====================================> Database
          ( Interfaces )         ( The drivers are having the implementation for interacting from the database)
                  
        ( Interface don;t have

          implementation ) 
====================================================================================================
What are the steps for inserting a record with the help with the JDBC
 1) Instantiating and loading the driver.
 2) Registering the driver with the driver Manager.
 3) Establishing the connection
 4) Creating a Statement so that it can hold the insert statement
 5) executing the query with the statement object.
 6) Closing the connection to release the database resource.
[Note:- The method related with JDBC throws a checked exception called SQLException and in our 
   code we always handled that exception ]
===============================================================================================================

* What is ORM?
***Java is what kind of Language ( Object Oriented Language)
***MYSQL ( Relational Database )

Q When we want to structure Java related data , how we go for creating the structure or the template?
A We create a class.
Q When we want to have a structure for storing data in RDBMS what we do?
A  We create tables.
Q When we want to actually store the data in OOL what we do?
A Creating objects.
Q When we want to actually store the data in RDBMS what we do?
A  records/tuples/rows
Q Attributes in classes are being called as?
A variables and properties
Q Attributes in tables are called as?
A Columns
Q How the relation between two objects are being set in OOP.
A HAS-A and IS-A
Q How the relation between two records from two different tables are being set.
A Joining the table with the help of primary key and foreign key.

Object   ==========================      Relation 

ORM Tool which is a layer of abstraction between Object Oriented Language and RDBMS.
                   JDBC through driver 
OBject ================================   Relation
  
Object ===============ORM================   Relation
               (JDBC through driver)
------------------------------------------------------------------------------------------------------------
The links which you can look for further reference:

https://www.tutorialspoint.com/hibernate/index.htm
https://www.javatpoint.com/hibernate-tutorial
-------------------------------------------------------------------------------------------------------------
What is Hibernate?
So Hibernate is one of the popular ORM tool.
Hibernate is a high-performance Object/Relational persistence and query service/framework, which is licensed under the open source GNU Lesser General Public License (LGPL) and is free to download. Hibernate not only takes care of the mapping from Java classes to database tables (and from Java data types to SQL data types), but also provides data query and retrieval facilities.
-------------------------------------------------------------------------------------------------------------
Basically being used to map Java classes to database tables.
-------------------------------------------------------------------------------------------------------
Prerequisites
We assume you have a good understanding of the Java programming language. A basic understanding of relational databases, JDBC, and SQL will be very helpful in understanding this tutorial.
--------------------------------------------------------------------------------------------------------------
What is JDBC?
JDBC stands for Java Database Connectivity. It provides a set of Java API for accessing the relational databases from Java program. These Java APIs enables Java programs to execute SQL statements and interact with any SQL compliant database.

JDBC provides a flexible architecture to write a database independent application that can run on different platforms and interact with different DBMS without any modification.
-----------------------------------------------------------------------------------------------------------

Why Object Relational Mapping (ORM)?
When we work with an object-oriented system, there is a mismatch between the object model and the relational database. RDBMSs represent data in a tabular format whereas object-oriented languages, such as Java or C# represent it as an interconnected graph of objects.

Java

public class Employee {
   private int id;
   private String first_name; 
   private String last_name;   
   private int salary;  

   public Employee() {}
   public Employee(String fname, String lname, int salary) {
      this.first_name = fname;
      this.last_name = lname;
      this.salary = salary;
   }
   
   public int getId() {
      return id;
   }
   
   public String getFirstName() {
      return first_name;
   }
   
   public String getLastName() {
      return last_name;
   }
   
   public int getSalary() {
      return salary;
   }
}
--------------------------------------------------------------------------------------------
In MySQL kind of DATABASE


create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);

============================================================================================

Sr.No.	Mismatch & Description
1	
Granularity

Sometimes you will have an object model, which has more classes than the number of corresponding tables in the database.

2	
Inheritance

RDBMSs do not define anything similar to Inheritance, which is a natural paradigm in object-oriented programming languages.

3	
Identity

An RDBMS defines exactly one notion of 'sameness': the primary key. Java, however, defines both object identity (a==b) and object equality (a.equals(b)).

4	
Associations

Object-oriented languages represent associations using object references whereas an RDBMS represents an association as a foreign key column.

5	
Navigation

The ways you access objects in Java and in RDBMS are fundamentally different.


The Object-Relational Mapping (ORM) is the solution to handle all the above impedance mismatches.


======================================================================================================


What is ORM?
ORM stands for Object-Relational Mapping (ORM) is a programming technique for converting data between relational databases and object oriented programming languages such as Java, C#, etc.

An ORM system has the following advantages over plain JDBC -

Sr.No.	Advantages
1	Let’s business code access objects rather than DB tables.
2	Hides details of SQL queries from OO logic.
3	Based on JDBC 'under the hood.'
4	No need to deal with the database implementation.
5	Entities based on business concepts rather than database structure.
6	Transaction management and automatic key generation.
7	Fast development of application.
-------------------------------------------------------------------------------------------------------------
Java ORM Frameworks
There are several persistent frameworks and ORM options in Java. A persistent framework is an ORM service that stores and retrieves objects into a relational database.

Enterprise JavaBeans Entity Beans
Java Data Objects
Castor
TopLink
Spring DAO
Hibernate
And many more
==========================================================================================================
Hibernate has a layered architecture which helps the user to operate without having to know the underlying APIs. Hibernate makes use of the database and configuration data to provide persistence services (and persistent objects) to the application.

Following is a very high level view of the Hibernate Application Architecture.
--------------------------------------------------------------------------------------------
Objects in ORM like Hibernate have difference 
  1) Transient 
  2) Persistent
  3) Detached
  4) Removed
---------------------------------------------------------------------------------------------------------

Hibernate uses various existing Java APIs, like JDBC, Java Transaction API(JTA), and Java Naming and Directory Interface (JNDI). JDBC provides a rudimentary level of abstraction of functionality common to relational databases, allowing almost any database with a JDBC driver to be supported by Hibernate. JNDI and JTA allow Hibernate to be integrated with J2EE application servers.

Following section gives brief description of each of the class objects involved in Hibernate Application Architecture.

Configuration Object

The Configuration object is the first Hibernate object you create in any Hibernate application. It is usually created only once during application initialization. It represents a configuration or properties file required by the Hibernate.

The Configuration object provides two keys components -

* Database Connection - This is handled through one or more configuration files supported by Hibernate. These files are hibernate.properties and hibernate.cfg.xml.

* Class Mapping Setup - This component creates the connection between the Java classes and database tables.
  In our case it is student.hbm.xml.

SessionFactory Object

Configuration object is used to create a SessionFactory object which in turn configures Hibernate for the application using the supplied configuration file and allows for a Session object to be instantiated. The SessionFactory is a thread safe object and used by all the threads of an application.

The SessionFactory is a heavyweight object; it is usually created during application start up and kept for later use. You would need one SessionFactory object per database using a separate configuration file. So, if you are using multiple databases, then you would have to create multiple SessionFactory objects.

Session Object

A Session is used to get a physical connection with a database. The Session object is lightweight and designed to be instantiated each time an interaction is needed with the database. Persistent objects are saved and retrieved through a Session object.

The session objects should not be kept open for a long time because they are not usually thread safe and they should be created and destroyed them as needed.

Transaction Object
A Transaction represents a unit of work with the database and most of the RDBMS supports transaction functionality. Transactions in Hibernate are handled by an underlying transaction manager and transaction (from JDBC or JTA).

This is an optional object and Hibernate applications may choose not to use this interface, instead managing transactions in their own application code.

Query Object

Query objects use SQL or Hibernate Query Language (HQL) string to retrieve data from the database and create objects. A Query instance is used to bind query parameters, limit the number of results returned by the query, and finally to execute the query.

Criteria Object

Criteria objects are used to create and execute object oriented criteria queries to retrieve objects.
---------------------------------------------------------------------------------------------------------------


